def get_m(hashes):

    """
    Return the (song_id, offset_diff) tuples associated with
    a list of (sha1, sample_offset) values.
    """
    # Create a dictionary of hash => offset pairs for later lookups
    mapper = {}
    for hash, offset in hashes:
        mapper[hash] = offset

    # Get an iteratable of all the hashes we need
    values = mapper.keys()

    with connection.cursor() as cur:
        for split_values in grouper(values, 1000):
            split_values = list(split_values)

            # Create our IN part of the query
            query = SELECT_MULTIPLE
            query = query % ', '.join(['%s'] * len(split_values))
            cur.execute(query, split_values)

            for hash, sid, offset in cur:
                # (sid, db_offset - song_sampled_offset)
                yield (sid, offset - mapper[hash])

def grouper(iterable, n, fillvalue=None):
    args = [iter(iterable)] * n
    return [filter(None, values) for values in zip_longest(fillvalue=fillvalue, *args)]